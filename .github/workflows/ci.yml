name: Continuous Integration (Docker Compose with RDS)

on:
  pull_request:
    branches: ["main"]

jobs:
  build-testing:
    name: Build and Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "# HTTP SERVER" > .env
          echo "HOST=localhost" >> .env
          echo "PORT=${{ secrets.APP_PORT }}" >> .env
          echo "" >> .env

          echo "# Database Production" >> .env
          echo "PGUSER=${{ secrets.DB_USER }}" >> .env
          echo "PGPASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PGDATABASE=${{ vars.DB_DBNAME }}" >> .env
          echo "PGHOST=${{ secrets.DB_HOST }}" >> .env
          echo "PGPORT=${{ secrets.DB_PORT }}" >> .env
          echo "" >> .env

          echo "# Database Test"
          echo "PGUSER_TEST=${{ secrets.DB_USER_TEST }}" >> .env
          echo "PGPASSWORD_TEST=${{ secrets.DB_PASSWORD_TEST }}" >> .env
          echo "PGDATABASE_TEST=${{ vars.DB_DBNAME_TEST }}" >> .env
          echo "PGHOST_TEST=${{ secrets.DB_HOST_TEST }}" >> .env
          echo "PGPORT_TEST=${{ secrets.DB_PORT_TEST }}" >> .env
          echo "" >> .env

          echo "# JWT Token" >> .env
          echo "ACCESS_TOKEN_KEY=${{ secrets.APP_ACCESS_TOKEN_KEY }}" >> .env
          echo "REFRESH_TOKEN_KEY=${{ secrets.APP_REFRESH_TOKEN_KEY }}" >> .env
          echo "ACCCESS_TOKEN_AGE=${{ secrets.APP_ACCCESS_TOKEN_AGE }}" >> .env

      - name: Create database migration config file for test
        run: |
          mkdir -p config/database
          echo '{' > config/database/test.json
          echo '  "user": "${{ secrets.DB_USER_TEST }}",' >> config/database/test.json
          echo '  "password": "${{ secrets.DB_PASSWORD_TEST }}",' >> config/database/test.json
          echo '  "host": "${{ secrets.DB_HOST_TEST }}",' >> config/database/test.json
          echo '  "port": ${{ secrets.DB_PORT_TEST }},' >> config/database/test.json
          echo '  "database": "${{ vars.DB_DBNAME_TEST }}"' >> config/database/test.json
          echo '}' >> config/database/test.json

      - name: Test database connectivity before Docker
        run: |
          echo "=== Testing database connectivity from GitHub Actions runner ==="

          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          echo "Creating databases if they don't exist..."
          echo "Creating production database forumapi..."
          PGPASSWORD='${{ secrets.DB_PASSWORD }}' createdb \
            -h '${{ secrets.DB_HOST }}' \
            -p '${{ secrets.DB_PORT }}' \
            -U '${{ secrets.DB_USER }}' \
            'forumapi' 2>/dev/null || echo "Production database already exists or creation failed"

          echo "Creating test database forumapi_test..."
          PGPASSWORD='${{ secrets.DB_PASSWORD_TEST }}' createdb \
            -h '${{ secrets.DB_HOST_TEST }}' \
            -p '${{ secrets.DB_PORT_TEST }}' \
            -U '${{ secrets.DB_USER_TEST }}' \
            'forumapi_test' 2>/dev/null || echo "Test database already exists or creation failed"

          echo "Testing production database connection..."
          timeout 30 bash -c "
            PGPASSWORD='${{ secrets.DB_PASSWORD }}' psql \
              -h '${{ secrets.DB_HOST }}' \
              -p '${{ secrets.DB_PORT }}' \
              -U '${{ secrets.DB_USER }}' \
              -d 'forumapi' \
              -c 'SELECT version();' 2>&1
          " || echo "Production database connection failed"

          echo "Testing test database connection..."
          timeout 30 bash -c "
            PGPASSWORD='${{ secrets.DB_PASSWORD_TEST }}' psql \
              -h '${{ secrets.DB_HOST_TEST }}' \
              -p '${{ secrets.DB_PORT_TEST }}' \
              -U '${{ secrets.DB_USER_TEST }}' \
              -d 'forumapi_test' \
              -c 'SELECT version();' 2>&1
          " || echo "Test database connection failed"

      - name: Build and Run Container
        run: |
          sudo docker compose --env-file .env up --build --detach

      - name: Wait for container and check status
        run: |
          echo "Waiting for container to start..."
          sleep 30

          echo "=== Container Status ==="
          sudo docker ps -a

          echo "=== Container Logs ==="
          sudo docker logs forum-api

          echo "=== Container Network Info ==="
          sudo docker exec forum-api bash -c "
            echo 'Container IP and network info:'
            ip addr show
            echo ''
            echo 'DNS resolution test from container:'
            nslookup \$PGHOST || echo 'DNS failed for production'
            nslookup \$PGHOST_TEST || echo 'DNS failed for test'
            echo ''
            echo 'Port connectivity test from container:'
            timeout 10 nc -zv \$PGHOST \$PGPORT || echo 'Production port not reachable from container'
            timeout 10 nc -zv \$PGHOST_TEST \$PGPORT_TEST || echo 'Test port not reachable from container'
          " 2>/dev/null || echo "Container network debugging failed"

          echo "=== Container Health Check ==="
          if sudo docker ps | grep -q forum-api; then
            echo "Container is running"
          else
            echo "Container is not running - checking logs..."
            sudo docker logs forum-api
            exit 1
          fi

      - name: Run tests (Unit, Integration, Functional)
        run: |
          echo "Running tests..."
          sudo docker exec forum-api bash -c "npm run test"

      - name: Cleanup
        if: always()
        run: |
          sudo docker compose down
          sudo docker system prune -f

      - name: Setup tmate session for debugging
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}
        with:
          limit-access-to-actor: true
